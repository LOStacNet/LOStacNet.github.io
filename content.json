{"meta":{"title":"LO_StacNet的火柴盒","subtitle":"","description":"LO_StacNet的个人博客","author":"LO_StacNet","url":"https://lostacnet.top","root":"/"},"pages":[{"title":"About","date":"2023-02-19T07:34:05.646Z","updated":"2023-02-19T07:34:05.646Z","comments":false,"path":"about/index.html","permalink":"https://lostacnet.top/about/","excerpt":"","text":"Hello World!这是学习代码最开始的一句，也可以是学习的代码的最终。"},{"title":"Categories","date":"2023-02-18T16:20:28.686Z","updated":"2023-02-18T16:20:28.686Z","comments":false,"path":"categories/index.html","permalink":"https://lostacnet.top/categories/","excerpt":"","text":""},{"title":"Links","date":"2023-02-19T07:32:46.372Z","updated":"2023-02-19T07:32:46.372Z","comments":true,"path":"links/index.html","permalink":"https://lostacnet.top/links/","excerpt":"","text":""},{"title":"Repositories","date":"2023-02-18T16:21:37.660Z","updated":"2023-02-18T16:21:37.660Z","comments":false,"path":"repository/index.html","permalink":"https://lostacnet.top/repository/","excerpt":"","text":""},{"title":"Tags","date":"2023-02-18T16:22:13.563Z","updated":"2023-02-18T16:22:13.563Z","comments":false,"path":"tags/index.html","permalink":"https://lostacnet.top/tags/","excerpt":"","text":""}],"posts":[{"title":"对傅里叶变换的一些理解","slug":"对傅里叶变换的一些理解","date":"2023-03-29T15:02:20.000Z","updated":"2023-03-29T15:43:59.205Z","comments":true,"path":"post/32902/","link":"","permalink":"https://lostacnet.top/post/32902/","excerpt":"对傅里叶变换的一些理解傅里叶变换将时域信号变成频域信号，能对信号进行频域上的分析，是分析信号的重要手段。这里我记录一下我对傅里叶变换的过程理解。","text":"对傅里叶变换的一些理解傅里叶变换将时域信号变成频域信号，能对信号进行频域上的分析，是分析信号的重要手段。这里我记录一下我对傅里叶变换的过程理解。 一，基本知识这里不加证明的给出几条基本知识： 任何周期信号都能够用傅里叶级数表示，即写成 形式。 是傅里叶级数系数，也称频率谱线，表示一个频率所占信号成分的的多少，其表达式为。 二，非周期函数的傅里叶变换周期函数的傅里叶变换就是将其写成傅里叶级数的形式，便可得到频谱。而对于不能写成傅里叶级数形式的非周期函数，可以将其视为的特殊情况，无限逼近。 对周期函数有：当时，可以得到：无限大，周期函数变非周期函数 无限小，变成微分 无限小，可以代表任何值，变成连续变量 变成连续的函数 那么定义一个X(jw)：则X(jw)是一个连续的频谱，值与**意义相同**。 现在再次看到周期函数的傅里叶变换，可以看到傅里叶级数是X(jw)的一系列离散点，而非周期函数是整个连续的频谱。 三，逆傅里叶变换周期函数的逆傅里叶变换就是傅里叶级数的形式：非周期函数的逆傅里叶变换则是将离散变连续:","categories":[{"name":"信号处理","slug":"信号处理","permalink":"https://lostacnet.top/categories/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"}],"tags":[{"name":"傅里叶变换","slug":"傅里叶变换","permalink":"https://lostacnet.top/tags/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/"}]},{"title":"MSP432E4学习笔记:工程创建","slug":"MSP432E4学习笔记-工程创建","date":"2023-03-25T08:50:15.000Z","updated":"2023-03-25T14:45:32.758Z","comments":true,"path":"post/32550/","link":"","permalink":"https://lostacnet.top/post/32550/","excerpt":"MSP432E4学习笔记:工程创建由于Ti是电赛的大金主，在比赛中使用Ti的片子会带来优势。正好手头有一块MSP432E401Y(官板真是好看)，所以打算趁着周六强制考勤时间去入门一下。","text":"MSP432E4学习笔记:工程创建由于Ti是电赛的大金主，在比赛中使用Ti的片子会带来优势。正好手头有一块MSP432E401Y(官板真是好看)，所以打算趁着周六强制考勤时间去入门一下。 一，下载必要软件包Ti为MSP430E4提供了SDK。但是Ti官网的命名让人十分迷惑，关于MSP432可以在Ti官网找到两个包：MSP432WARE,SIMPLELINK-MSP432E4-SDK.经过实测，其中SIMPLELINK-MSP432E4-SDK是MSP432E4的SDK，另外一个是MSP432P的SDK(SBTi)。 下载后直接安装，安装完成后会自动打开版本手册和快速开始指导，其中快速指导中写了如何创建新的工程，包括使用CCS，IAR，Keil。我们这里使用Keil进行开发。 Download and Install Keil uVision 5.23 Install the TexasInstruments::MSP432E4xx_DFP pack Install the ARM::CMSIS pack 可以看到，我们还需要下载MSP432E4的keil PACK。 打开keil，进入Pack Installer。 在Devices中找到Ti的MSP432E4。 点击后，在右侧可以看见pack包，可以选择直接在软件中安装(很慢)，也可以选择自己到网页上下载。 这里为了快速下载，我们点击Device中芯片型号后面的蓝色链接打开keil官网，如下图，点击Download按钮直接下载Pack，下载完成后点击安装。 完成上述步骤后开发环境就配置好了，打开SDK安装目录下的点灯例程:examples\\nortos\\MSP_EXP432E401Y\\driverlib\\blinky,打开工程，编译。 将MSPE401Y开发板连接上电脑，这时电脑应该会自动配置驱动，配置完成后点击下载程序，就可以看见灯闪了。 二，创建新的工程（一）通过空工程创建在Quick_Start中，Ti告诉我们不要使用Keil自带的创建工程新建新的工程，要求基于其中的例程进行创建，也就是直接使用Ti给你创建好的工程进行开发。 Do not use the New Project Creation Wizard Start with one of the example projects or empty project template shipped inside the SDK. Each software component in the SDK comes with its own set of examples. If your project depends on multiple TI provided software libraries, start from the empty template then add the necessary components into your projects. Import one of the empty project template shown below to your IDE and start your application from there. All the necessary include paths and SDK specific defines if any are already part of the Empty Project Template 因此，直接打开:examples\\nortos\\MSP_EXP432E401Y\\driverlib\\empty空工程进行就可以进行开发了。 （二）使用Keil创建工程由于之前刚刚学会了如何脱离Cube创建STM32的工程，现在想自己实践一下亲自创建，所以打算手动创建一下Keil工程(浑身反骨)。 我们先打开编译过的blinky工程，首先看一下它的目录结构： 其中Blinky.c是类似于STM32中**main.c文件**，由用户创建。 打开system_msp432e401y,c观察，发现是和时钟频率有关的函数，很像STM32中的文件。 其他四个文件夹分别对应四种不同的开发环境，这里我们打开keil文件夹： 红框中的文件时打开keil编译后产生的，不用管。 .uvoptx结尾的文件是keil的工程，创建工程时建立。 .sct工程是Ti提供的链接文件，具体用途可以百度，但是我们发现Objects中也有一个sct文件，这是keil编译时自动生成的，上图目录中的sct文件其实没用（但是为了保证工程的正确性，最好还是使用Ti提供的sct文件）。 startup_msp432e401y_uvision.s就不用说了吧，经典的启动文件。 那么工程文件结构就看完了，是不是发现少了什么？对，各种奇怪的头文件不见了，然后还没有库函数文件。这些东西在哪呢？ 我们先打开工程文件，看一下keil的配置： 工程目录中可以看到之前在目录中看见的文件，这里多出来一个.a文件，经过查找，发现在simplelink_msp432e4_sdk_4_20_00_12\\source\\ti\\devices\\msp432e4\\driverlib\\lib\\keil\\m4f中。 再查看头文件，发现在simplelink_msp432e4_sdk_4_20_00_12\\source\\ti\\devices\\msp432e4 以及simplelink_msp432e4_sdk_4_20_00_12\\source\\third_party\\CMSIS\\Include 可以找到 那么到这里就可以知道了，主要的库文件都在E:\\TI\\simplelink_msp432e4_sdk_4_20_00_12\\source\\ti\\devices\\msp432e4下面，接下来就可以开始创建工程了。 1，创建工程打开keil，点击新建工程，选择芯片为：MSP432E401Y。 新建完成后，我们将SDK安装目录\\source\\ti\\devices\\msp432e4打开，准备复制文件。 2，复制启动文件首先点开startup_system_files文件夹，将system_msp432e401y.c和keil文件夹中的startup_msp432e401y_uvision.s复制到工程目录下（我复制到了目录中的startup文件夹下） 3，复制连接文件点开linker_files\\keil文件夹，将MSP432E401Y.sct文件复制到工程目录。 4，复制头文件打开simplelink_msp432e4_sdk_4_20_00_12\\source文件夹，可以看到如下文件夹: ti：包含了Ti的各种文件，包括寄存器地址，基本驱动函数库 third_party:第三方的各种文件，包括ARM核的相关操作函数，fatfs文件系统,DSP等库 这里我们需要添加这两个文件夹的东西。 首先是ARM内核和编译器的文件: 打开simplelink_msp432e4_sdk_4_20_00_12\\source\\third_party\\CMSIS\\Include，根据我们使用的芯片(M4内核),以及编译器(gcc)选择添加头文件： cmsis_armcc.h cmsis_compiler.h cmsis_version.h core_cm4.h mpu_armv7.h 然后是Ti的库和启动函数文件： 打开simplelink_msp432e4_sdk_4_20_00_12\\source\\ti\\devices\\msp432e4\\inc 将inc文件夹复制到工程目录。 其实不必全部复制，msp.h和msp432.h文件其实都是根据芯片选型定向到msp432e4xx.h。但是为了程序兼容性，还是一起复制。 5，复制driverlib文件点开driverlib文件夹，里面东西很多，都是基本的驱动库。 inc定义了基本的寄存器基地址，MASK等等 xxx.h/xxx.c则是基本驱动库 lib包含了已经编译好的上述基本驱动库 这里可以选择通过源码添加(直接添加源文件)，也可以添加已经编译好的文件(这样在调试时就不好看寄存器操作了)，为了方便就直接添加lib。 首先将这个文件夹的头文件复制到工程目录(不包括inc中的文件)，然后复制lib中相应的.a文件到工程目录。 6，设置keil点开keil的工程设置，选择C/C++选项，添加Include路径: 工程中的inc文件 driverlib中的inc文件 然后选择Link选项，添加sct文件。 之后选择Debug选项，将调试器改为CMSIS-DAP: 然后添加工程文件: 然后修改文件中头文件的路径，让引用指向本地工程文件夹中的文件。 .a文件需要设置为库文件： 7，编译，下载将点灯工程的代码复制到我们新建的工程中，编译下载，可以看见成功运行。 三，后记相比于CubeMX创建工程，这个创建是真的麻烦，比STM32不用Cube创建都要麻烦。所以还是听官方的话吧，乖乖直接复制空工程开发。 但是这样麻烦还是有回报的：Ti的库文件基本都在本地工程中，可以随意修改而不怕影响到其他工程。不然全部工程共用一个库，肯定会有一堆问题。 其实Ti提供的东西还挺多的，SDK包含了DSP，文件系统，GUI等一堆东西，还有例程，但是这些东西藏的好深，没什么说明。","categories":[{"name":"Ti","slug":"Ti","permalink":"https://lostacnet.top/categories/Ti/"}],"tags":[{"name":"MSP432E4","slug":"MSP432E4","permalink":"https://lostacnet.top/tags/MSP432E4/"}]},{"title":"Typora与hexo的优雅结合:公式和图片","slug":"Typora与hexo的优雅结合-公式和图片","date":"2023-02-21T07:12:17.000Z","updated":"2023-02-21T09:16:27.263Z","comments":true,"path":"post/22112/","link":"","permalink":"https://lostacnet.top/post/22112/","excerpt":"Typora与hexo的优雅结合:公式和图片Typora是一款十分好用的Markdown编写软件，用它写文章可以大大提升工作效率。但是当我想将它用于博客编写时出现了一些问题：1，图片无法正常显示。2，latex公式无法显示。在这里我给出我的解决方法。","text":"Typora与hexo的优雅结合:公式和图片Typora是一款十分好用的Markdown编写软件，用它写文章可以大大提升工作效率。但是当我想将它用于博客编写时出现了一些问题：1，图片无法正常显示。2，latex公式无法显示。在这里我给出我的解决方法。 一，解决公式的显示由于学习方向的特殊性，有时我需要插入一些简单的公式。但是hexo自带的渲染器不支持渲染公式，因此需要引入渲染引擎。 网上常见的方法是使用hexo-math插件支持KaTex和MathJax引擎进行渲染，但是它的用法是这样的： 123{% mathjax %}\\frac{1}{x^2-1}{% endmathjax %} 非常的不优雅:D 因此需要配合其他插件使用(变的麻烦起来了)。对于我这种公式轻度使用者来说麻烦。 但是在hexo-math插件的github界面的最下面推荐了另一款轻量的hexo-filter-mathjax hexo-filter-mathjax: A MathJax plugin developed by @stevenjoezhang, who is also a Hexo developer. It enables you to write LaTeX in-line within your post without using a tag {% %}. hexo-math uses tag plugin approach due to minor incompatibility between LaTeX and marked, the default markdown renderer of Hexo (via hexo-renderer-marked). 可以直接用$来引入公式，和Typora的用法一样，十分的Nice。 根据插件的说明，我们需要卸载一些东西一避免冲突： 删除所有的hexo math plugins–npm uninstall 停止主题的公式渲染–一般在主题设置里面 删除关于公式渲染的插件 Tips:我在使用npm uninstall时发现一直删不掉，最后是先把package.json的无关插件依赖删掉，然后删除node_modules文件夹，然后直接重新npm 使用以下命令安装: 12npm install hexo-filter-mathjax --save //使用--save是将这个插件添加到package.json的依赖列表 然后使用hexo clean清除之前渲染的界面。 打开_config.yml，在文件末尾添加设置选项: 1234567891011mathjax: tags: none # or 'ams' or 'all' single_dollars: true # enable single dollar signs as in-line math delimiters cjk_width: 0.9 # relative CJK char width normal_width: 0.6 # relative normal (monospace) width append_css: true # add CSS to pages rendered by MathJax every_page: false # if true, every page will be rendered by MathJax regardless the `mathjax` setting in Front-matter packages: # extra packages to load extension_options: {} # you can put your extension options here # see http://docs.mathjax.org/en/latest/options/input/tex.html#tex-extension-options for more detail 之后在文章的Front-matter中添加mathjax: true即可开启当前文章的公式渲染。（如果开启了配置中的every_page即可在每一页默认开启） 使用演示： 123$$THD={\\sqrt{x}}$$ 当然，出现复杂的公式就会出现问题： 123456789101112131415$$A = \\begin{bmatrix}a_{11} &amp; a_{12} &amp; ... &amp; a_{1n}\\\\a_{21} &amp; a_{22} &amp; ... &amp; a_{2n}\\\\a_{31} &amp; a_{22} &amp; ... &amp; a_{3n}\\\\\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\a_{n1} &amp; a_{n2} &amp; ... &amp; a_{nn}\\\\\\end{bmatrix} , b = \\begin{bmatrix}b_{1} \\\\b_{2} \\\\b_{3} \\\\\\vdots \\\\b_{n} \\\\\\end{bmatrix}$$ 但我一般用不到，就不管了。 二，解决图片的显示在文章中使用Markdown语法插入图片要面对Markdown语法转换问题，以及图片储存问题，还要考虑如何与Typora优雅的兼容。 1，使用本地储存图片第一种方法将图片储存在本地，在推送时一起上传到托管服务器。 这种方式有很多的插件，包括更换Markdown渲染器，以及图片插入插件来支持markdown的图片插入语法。但是根据hexo的官方文档，在最新版本的默认渲染器hexo-renderer-marked中，已经支持了这种插入方式。 启用方式： 打开_config.yml修改post_asset_folder:true，打开此项后会在使用hexo new命令时，在文章目录下新建同名的文件夹用来储存图片。 在_config.yml中添加： 123marked: prependRoot: true postAsset: true 启用后在文章中使用！[](image.jpg)将会自动解析到上述文件夹中的图片。 （但是这样会导致在本地浏览md文件时无法显示图片） 上述设置之后，打开Typora软件，在文件-&gt;偏好设置-&gt;图片中如下设置: 这样，在Typora中插入图片时，就会自动将图片复制到上面说的同名文件夹了。 然后，当我们写完文章时，注意进行全局替换：将图片路径中的文件夹路径删掉，只保留图片文件名称，这样hexo才能正常渲染。 这时推送后，图片文件会随着网页一起推送到托管网站。 但是这样又不优雅了，本地浏览看不见图片，推送到网站占用有限的空间，如果遇到github这种网站，图片半天加载不出。这时，就要使用图床。 2，使用图床如果使用图床保存图片的话，那么上面的hexo就不用设置。同时，Typora也提供了非常方便的上传设置，可以使用picgo或者自定义脚本进行上传。 首先，我们需要一个稳定的图床：这里我选择了路过图床。但是路过图床关闭了上传图片的API同时picgo也没有支持它的插件，因此需要自己去抓包写一个上传的脚本。 好在，有人已经写出来了(基于python)：up2b。 使用方法（首先确认已经安装python）： 安装up2b包: 1pip isntall up2b 使用以下命令设置路过图床 1up2b -c 1 设置账号 1up2b -l username password 此时就可以使用up2b命令上传图片了。 打开typora，进行如下设置： 点击验证看是否正常运行。 此时，向typora插入图片，会自动上传到图床，并且将图片连接换成网络链接。 这样，就可以在网页上和本地同时看到图片了。 up2b还提供了压缩图片和添加水印的功能，可以到它的主页查看用法。如果无法使用请到github上提issue。 这下看起来好像就万无一失了，但是图床的使用有一个大问题：不稳定。可能哪天你的图片就全部不见了，因此需要图片先存到本地再上传到图床。 3，本地储存+图床这里就不需要设置hexo了，保持默认就行。我们对Typora进行如下设置： 这样在插入图片时，会自动复制到本地文件夹中，当写好文章需要推送时，只需要点击格式-&gt;图像-&gt;上传全部本地图像，这样Typora就会自动上传所有本地图像到图床并且替换图片地址。保证了本地备份和使用图床。 优雅，太优雅了。","categories":[{"name":"blog","slug":"blog","permalink":"https://lostacnet.top/categories/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://lostacnet.top/tags/hexo/"},{"name":"Typora","slug":"Typora","permalink":"https://lostacnet.top/tags/Typora/"}]},{"title":"第一篇博客","slug":"第一篇博客","date":"2023-02-18T17:11:55.000Z","updated":"2023-02-20T11:33:58.916Z","comments":true,"path":"post/21911/","link":"","permalink":"https://lostacnet.top/post/21911/","excerpt":"LO_StacNet的第一篇博客这里是LO_StacNet的第一篇博客，LO的学习之路将从这里开始.","text":"LO_StacNet的第一篇博客这里是LO_StacNet的第一篇博客，LO的学习之路将从这里开始. The Next In psot","categories":[{"name":"life","slug":"life","permalink":"https://lostacnet.top/categories/life/"}],"tags":[{"name":"begin","slug":"begin","permalink":"https://lostacnet.top/tags/begin/"}]}],"categories":[{"name":"信号处理","slug":"信号处理","permalink":"https://lostacnet.top/categories/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"},{"name":"Ti","slug":"Ti","permalink":"https://lostacnet.top/categories/Ti/"},{"name":"blog","slug":"blog","permalink":"https://lostacnet.top/categories/blog/"},{"name":"life","slug":"life","permalink":"https://lostacnet.top/categories/life/"}],"tags":[{"name":"傅里叶变换","slug":"傅里叶变换","permalink":"https://lostacnet.top/tags/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/"},{"name":"MSP432E4","slug":"MSP432E4","permalink":"https://lostacnet.top/tags/MSP432E4/"},{"name":"hexo","slug":"hexo","permalink":"https://lostacnet.top/tags/hexo/"},{"name":"Typora","slug":"Typora","permalink":"https://lostacnet.top/tags/Typora/"},{"name":"begin","slug":"begin","permalink":"https://lostacnet.top/tags/begin/"}]}